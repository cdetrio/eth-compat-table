RPEECEE SIM STARTED
Hive simulator: http://172.17.0.1:37954

req: <Response [200]>
req.status_code: 200
req.text: a881e273
req2: <Response [200]>
req2.status_code: 200
req2.text: 172.17.0.3
node_ip: 172.17.0.3
clientVersion res.json(): {u'jsonrpc': u'2.0', u'id': 1, u'result': u'pyethapp/1.5.0/linux2/py2.7.12'}
('sending unlock_account rpc payload:', {'params': ['0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb', 'password', 300], 'jsonrpc': '2.0', 'method': 'personal_unlockAccount', 'id': 1})
unlock_account res.json(): {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Hash algo scrypt not supported', u'code': -32000}}
validating tests and schemas before running them.

validating tests for method: eth_getTransactionByHash.json
loaded test file: tests/eth_getTransactionByHash.json
read test_data: <open file 'tests/eth_getTransactionByHash.json', mode 'r' at 0x7f971b287300>
running test: eth_getTransactionByHash get tx hash
rpc request schema validated.
mock reporter subresult: eth_getTransactionByHash get tx hash. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getTransactionByHash get tx hash. rpc expected response schema valid True None
response has tx hash : True
mock reporter subresult: eth_getTransactionByHash get tx hash. response has tx hash. True None
tx hashes should be equal : True
mock reporter subresult: eth_getTransactionByHash get tx hash. tx hashes should be equal. True None
blockNumber should be 2 : True
mock reporter subresult: eth_getTransactionByHash get tx hash. blockNumber should be 2. True None
running test: eth_getTransactionByHash with no parameters
rpc request schema validated.
mock reporter subresult: eth_getTransactionByHash with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getTransactionByHash with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getTransactionByHash with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getTransactionByHash with no parameters. error code should be -32602. True None
running test: eth_getTransactionByHash nonexistent tx
rpc request schema validated.
mock reporter subresult: eth_getTransactionByHash nonexistent tx. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getTransactionByHash nonexistent tx. rpc expected response schema valid True None
response should be null : True
mock reporter subresult: eth_getTransactionByHash nonexistent tx. response should be null. True None

validating tests for method: eth_getBlockByNumber.json
loaded test file: tests/eth_getBlockByNumber.json
read test_data: <open file 'tests/eth_getBlockByNumber.json', mode 'r' at 0x7f971b287390>
running test: eth_getBlockByNumber without full transactions
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber without full transactions. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber without full transactions. rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByNumber without full transactions. response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByNumber without full transactions. headers should be equal. True None
transactions should be hashes : True
mock reporter subresult: eth_getBlockByNumber without full transactions. transactions should be hashes. True None
running test: eth_getBlockByNumber with full transactions
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber with full transactions. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber with full transactions. rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByNumber with full transactions. response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByNumber with full transactions. headers should be equal. True None
transactions should be objects : True
mock reporter subresult: eth_getBlockByNumber with full transactions. transactions should be objects. True None
running test: eth_getBlockByNumber with no parameters
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getBlockByNumber with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getBlockByNumber with no parameters. error code should be -32602. True None
running test: eth_getBlockByNumber with one parameter
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber with one parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber with one parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getBlockByNumber with one parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getBlockByNumber with one parameter. error code should be -32602. True None
running test: eth_getBlockByNumber get genesis block ("earliest")
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber get genesis block ("earliest"). rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber get genesis block ("earliest"). rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByNumber get genesis block ("earliest"). response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByNumber get genesis block ("earliest"). headers should be equal. True None
block number should be zero : True
mock reporter subresult: eth_getBlockByNumber get genesis block ("earliest"). block number should be zero. True None
running test: eth_getBlockByNumber get latest block
rpc request schema validated.
mock reporter subresult: eth_getBlockByNumber get latest block. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByNumber get latest block. rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByNumber get latest block. response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByNumber get latest block. headers should be equal. True None
block number should be 32 : True
mock reporter subresult: eth_getBlockByNumber get latest block. block number should be 32. True None

validating tests for method: eth_getBlockByHash.json
loaded test file: tests/eth_getBlockByHash.json
read test_data: <open file 'tests/eth_getBlockByHash.json', mode 'r' at 0x7f971b287300>
running test: eth_getBlockByHash without full transactions
rpc request schema validated.
mock reporter subresult: eth_getBlockByHash without full transactions. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByHash without full transactions. rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByHash without full transactions. response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByHash without full transactions. headers should be equal. True None
transactions should be hashes : True
mock reporter subresult: eth_getBlockByHash without full transactions. transactions should be hashes. True None
running test: eth_getBlockByHash with full transactions
rpc request schema validated.
mock reporter subresult: eth_getBlockByHash with full transactions. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByHash with full transactions. rpc expected response schema valid True None
response has blockHeader hash : True
mock reporter subresult: eth_getBlockByHash with full transactions. response has blockHeader hash. True None
headers should be equal : True
mock reporter subresult: eth_getBlockByHash with full transactions. headers should be equal. True None
transactions should be objects : True
mock reporter subresult: eth_getBlockByHash with full transactions. transactions should be objects. True None
running test: eth_getBlockByHash with no parameters
rpc request schema validated.
mock reporter subresult: eth_getBlockByHash with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByHash with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getBlockByHash with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getBlockByHash with no parameters. error code should be -32602. True None
running test: eth_getBlockByHash with one parameter
rpc request schema validated.
mock reporter subresult: eth_getBlockByHash with one parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockByHash with one parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getBlockByHash with one parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getBlockByHash with one parameter. error code should be -32602. True None

validating tests for method: eth_getUncleByBlockNumberAndIndex.json
loaded test file: tests/eth_getUncleByBlockNumberAndIndex.json
read test_data: <open file 'tests/eth_getUncleByBlockNumberAndIndex.json', mode 'r' at 0x7f971b287660>
running test: eth_getUncleByBlockNumberAndIndex uncle at index 0
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc expected response schema valid True None
response has hash : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex uncle at index 0. response has hash. True None
hashes should be equal : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex uncle at index 0. hashes should be equal. True None
running test: eth_getUncleByBlockNumberAndIndex with no parameters
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with no parameters. error code should be -32602. True None
running test: eth_getUncleByBlockNumberAndIndex with one parameter
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with one parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with one parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with one parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleByBlockNumberAndIndex with one parameter. error code should be -32602. True None

validating tests for method: eth_getUncleCountByBlockNumber.json
loaded test file: tests/eth_getUncleCountByBlockNumber.json
read test_data: <open file 'tests/eth_getUncleCountByBlockNumber.json', mode 'r' at 0x7f971b287390>
running test: eth_getUncleCountByBlockNumber for block with two uncles
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber for block with two uncles. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber for block with two uncles. rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getUncleCountByBlockNumber for block with two uncles. response is not empty. True None
uncle count should be equal : True
mock reporter subresult: eth_getUncleCountByBlockNumber for block with two uncles. uncle count should be equal. True None
running test: eth_getUncleCountByBlockNumber for block that doesn't exist
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber for block that doesn't exist. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber for block that doesn't exist. rpc expected response schema valid True None
response should be null : True
mock reporter subresult: eth_getUncleCountByBlockNumber for block that doesn't exist. response should be null. True None
response should not be an error : True
mock reporter subresult: eth_getUncleCountByBlockNumber for block that doesn't exist. response should not be an error. True None
running test: eth_getUncleCountByBlockNumber no parameter
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber no parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockNumber no parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleCountByBlockNumber no parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleCountByBlockNumber no parameter. error code should be -32602. True None

validating tests for method: eth_getBlockTransactionCountByNumber.json
loaded test file: tests/eth_getBlockTransactionCountByNumber.json
read test_data: <open file 'tests/eth_getBlockTransactionCountByNumber.json', mode 'r' at 0x7f971b287660>
running test: eth_getBlockTransactionCountByNumber for block with one tx
rpc request schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber for block with one tx. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber for block with one tx. rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getBlockTransactionCountByNumber for block with one tx. response is not empty. True None
transaction count should be equal : True
mock reporter subresult: eth_getBlockTransactionCountByNumber for block with one tx. transaction count should be equal. True None
running test: eth_getBlockTransactionCountByNumber "earliest"
rpc request schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber "earliest". rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber "earliest". rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getBlockTransactionCountByNumber "earliest". response is not empty. True None
transaction count should be equal : True
mock reporter subresult: eth_getBlockTransactionCountByNumber "earliest". transaction count should be equal. True None
running test: eth_getBlockTransactionCountByNumber "latest"
rpc request schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber "latest". rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber "latest". rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getBlockTransactionCountByNumber "latest". response is not empty. True None
transaction count should be equal : True
mock reporter subresult: eth_getBlockTransactionCountByNumber "latest". transaction count should be equal. True None
running test: eth_getBlockTransactionCountByNumber with no parameters
rpc request schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockTransactionCountByNumber with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getBlockTransactionCountByNumber with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getBlockTransactionCountByNumber with no parameters. error code should be -32602. True None

validating tests for method: eth_getUncleCountByBlockHash.json
loaded test file: tests/eth_getUncleCountByBlockHash.json
read test_data: <open file 'tests/eth_getUncleCountByBlockHash.json', mode 'r' at 0x7f971b287390>
running test: eth_getUncleCountByBlockHash for block with two uncles
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash for block with two uncles. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash for block with two uncles. rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getUncleCountByBlockHash for block with two uncles. response is not empty. True None
uncle count should be equal : True
mock reporter subresult: eth_getUncleCountByBlockHash for block with two uncles. uncle count should be equal. True None
running test: eth_getUncleCountByBlockHash for block that doesn't exist
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash for block that doesn't exist. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash for block that doesn't exist. rpc expected response schema valid True None
response should be null : True
mock reporter subresult: eth_getUncleCountByBlockHash for block that doesn't exist. response should be null. True None
response should not be an error : True
mock reporter subresult: eth_getUncleCountByBlockHash for block that doesn't exist. response should not be an error. True None
running test: eth_getUncleCountByBlockHash no parameter
rpc request schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash no parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleCountByBlockHash no parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleCountByBlockHash no parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleCountByBlockHash no parameter. error code should be -32602. True None

validating tests for method: debug_storageRangeAt.json
loaded test file: tests/debug_storageRangeAt.json
read test_data: <open file 'tests/debug_storageRangeAt.json', mode 'r' at 0x7f971b287660>
running test: debug_storageRangeAt experimental method
rpc request schema validated.
mock reporter subresult: debug_storageRangeAt experimental method. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: debug_storageRangeAt experimental method. rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: debug_storageRangeAt experimental method. response is not empty. True None
key 0x00 should be first result in the array : True
mock reporter subresult: debug_storageRangeAt experimental method. key 0x00 should be first result in the array. True None
storage values at 0x00 should be equal : True
mock reporter subresult: debug_storageRangeAt experimental method. storage values at 0x00 should be equal. True None
running test: debug_storageRangeAt for block that doesn't exist
rpc request schema validated.
mock reporter subresult: debug_storageRangeAt for block that doesn't exist. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: debug_storageRangeAt for block that doesn't exist. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: debug_storageRangeAt for block that doesn't exist. response should be an error. True None
response should have error code -32000 : True
mock reporter subresult: debug_storageRangeAt for block that doesn't exist. response should have error code -32000. True None
response should have error message block not found : True
mock reporter subresult: debug_storageRangeAt for block that doesn't exist. response should have error message block not found. True None
running test: debug_storageRangeAt no parameter
rpc request schema validated.
mock reporter subresult: debug_storageRangeAt no parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: debug_storageRangeAt no parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: debug_storageRangeAt no parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: debug_storageRangeAt no parameter. error code should be -32602. True None

validating tests for method: eth_sign.json
loaded test file: tests/eth_sign.json
read test_data: <open file 'tests/eth_sign.json', mode 'r' at 0x7f971b287390>
running test: eth_sign message "hello world"
rpc request schema validated.
mock reporter subresult: eth_sign message "hello world". rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_sign message "hello world". rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_sign message "hello world". response is not empty. True None
signed message should be length 132 : True
mock reporter subresult: eth_sign message "hello world". signed message should be length 132. True None
signatures should be equal : True
mock reporter subresult: eth_sign message "hello world". signatures should be equal. True None
running test: eth_sign with no parameters
rpc request schema validated.
mock reporter subresult: eth_sign with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_sign with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_sign with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_sign with no parameters. error code should be -32602. True None
running test: eth_sign with one parameter
rpc request schema validated.
mock reporter subresult: eth_sign with one parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_sign with one parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_sign with one parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_sign with one parameter. error code should be -32602. True None

validating tests for method: eth_getBlockTransactionCountByHash.json
loaded test file: tests/eth_getBlockTransactionCountByHash.json
read test_data: <open file 'tests/eth_getBlockTransactionCountByHash.json', mode 'r' at 0x7f971b2879c0>
running test: eth_getBlockTransactionCountByHash for block with one tx
rpc request schema validated.
mock reporter subresult: eth_getBlockTransactionCountByHash for block with one tx. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getBlockTransactionCountByHash for block with one tx. rpc expected response schema valid True None
response is not empty : True
mock reporter subresult: eth_getBlockTransactionCountByHash for block with one tx. response is not empty. True None
transaction count should be equal : True
mock reporter subresult: eth_getBlockTransactionCountByHash for block with one tx. transaction count should be equal. True None

validating tests for method: eth_getUncleByBlockHashAndIndex.json
loaded test file: tests/eth_getUncleByBlockHashAndIndex.json
read test_data: <open file 'tests/eth_getUncleByBlockHashAndIndex.json', mode 'r' at 0x7f971b287390>
running test: eth_getUncleByBlockHashAndIndex uncle at index 0
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex uncle at index 0. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex uncle at index 0. rpc expected response schema valid True None
response has hash : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex uncle at index 0. response has hash. True None
hashes should be equal : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex uncle at index 0. hashes should be equal. True None
running test: eth_getUncleByBlockHashAndIndex with no parameters
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex with no parameters. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex with no parameters. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex with no parameters. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex with no parameters. error code should be -32602. True None
running test: eth_getUncleByBlockHashAndIndex with one parameter
rpc request schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex with one parameter. rpc request schema valid True None
rpc expected response schema validated.
mock reporter subresult: eth_getUncleByBlockHashAndIndex with one parameter. rpc expected response schema valid True None
response should be an error : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex with one parameter. response should be an error. True None
error code should be -32602 : True
mock reporter subresult: eth_getUncleByBlockHashAndIndex with one parameter. error code should be -32602. True None
ran all test cases against the schemas.
All test cases valided.
tests validated.

running tests for method: eth_getTransactionByHash.json
running test: eth_getTransactionByHash get tx hash
sending rpc request: {'params': [u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81'], 'jsonrpc': '2.0', 'method': u'eth_getTransactionByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0x1', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x4cb2f', u'value': u'0xa', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'transactionIndex': u'0x0', u'gasPrice': u'0x1'}}
ERROR. couldn't validate rpc received response against schema.
exception: {u'nonce': u'0x1', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x4cb2f', u'value': u'0xa', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'transactionIndex': u'0x0', u'gasPrice': u'0x1'} is not valid under any of the given schemas

Failed validating u'oneOf' in schema[u'allOf'][1][u'properties'][u'result']:
    {u'description': u'Object - A transaction object, or null when no transaction was found.',
     u'oneOf': [{u'properties': {u'blockHash': {u'description': u'DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.',
                                                u'type': u'string'},
                                 u'blockNumber': {u'description': u'QUANTITY - block number where this transaction was in. null when its pending.',
                                                  u'type': u'string'},
                                 u'from': {u'description': u'DATA, 20 Bytes - address of the sender.',
                                           u'type': u'string'},
                                 u'gas': {u'description': u'QUANTITY - gas provided by the sender.',
                                          u'type': u'string'},
                                 u'gasPrice': {u'description': u'QUANTITY - gas price provided by the sender in Wei.',
                                               u'type': u'string'},
                                 u'hash': {u'description': u'DATA, 32 Bytes - hash of the transaction.',
                                           u'type': u'string'},
                                 u'input': {u'description': u'DATA - the data send along with the transaction.',
                                            u'type': u'string'},
                                 u'nonce': {u'description': u'nonce: QUANTITY - the number of transactions made by the sender prior to this one.',
                                            u'type': u'string'},
                                 u'r': {u'type': u'string'},
                                 u's': {u'type': u'string'},
                                 u'to': {u'description': u'DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.',
                                         u'type': u'string'},
                                 u'transactionIndex': {u'description': u'QUANTITY - integer of the transactions index position in the block. null when its pending.',
                                                       u'type': u'string'},
                                 u'v': {u'type': u'string'},
                                 u'value': {u'description': u'QUANTITY - value transferred in Wei.',
                                            u'type': u'string'}},
                 u'required': [u'blockHash',
                               u'blockNumber',
                               u'from',
                               u'gas',
                               u'gasPrice',
                               u'hash',
                               u'input',
                               u'nonce',
                               u'r',
                               u's',
                               u'to',
                               u'transactionIndex',
                               u'v',
                               u'value'],
                 u'type': u'object'},
                {u'type': u'null'}]}

On instance[u'result']:
    {u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942',
     u'blockNumber': u'0x2',
     u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',
     u'gas': u'0x4cb2f',
     u'gasPrice': u'0x1',
     u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81',
     u'input': u'0x12a7b914',
     u'nonce': u'0x1',
     u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f',
     u'transactionIndex': u'0x0',
     u'value': u'0xa'}
response has tx hash : True
tx hashes should be equal : True
blockNumber should be 2 : True
running test: eth_getTransactionByHash with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getTransactionByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getTransactionByHash() takes exactly 2 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getTransactionByHash nonexistent tx
sending rpc request: {'params': [u'0xd2f1575105fd2272914d77355b8dab5afbdde4b012abd849e8b32111be498b0d'], 'jsonrpc': '2.0', 'method': u'eth_getTransactionByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': None}
rpc response schema validated.
response should be null : True

running tests for method: eth_getBlockByNumber.json
running test: eth_getBlockByNumber without full transactions
sending rpc request: {'params': [u'0x02', False], 'jsonrpc': '2.0', 'method': u'eth_getBlockByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Invalid quantity encoding', u'code': -32000}}
rpc response schema validated.
response has blockHeader hash : False
headers should be equal : False
transactions should be hashes : False
running test: eth_getBlockByNumber with full transactions
sending rpc request: {'params': [u'0x02', True], 'jsonrpc': '2.0', 'method': u'eth_getBlockByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Invalid quantity encoding', u'code': -32000}}
rpc response schema validated.
response has blockHeader hash : False
headers should be equal : False
transactions should be objects : False
running test: eth_getBlockByNumber with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getBlockByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockByNumber() takes exactly 3 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getBlockByNumber with one parameter
sending rpc request: {'params': [u'0x02'], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockByHash() takes exactly 3 arguments (2 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getBlockByNumber get genesis block ("earliest")
sending rpc request: {'params': [u'earliest', False], 'jsonrpc': '2.0', 'method': u'eth_getBlockByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0x78cc16f7b4f65485', u'logsBloom': u'0xu'transactionsRoot': u'0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', u'hash': u'0xf8f01382f5636d02edac7fff679a6feb7a572d37a395daaab77938feb6fe217f', u'uncles': [], u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0x8888f1f195afa192cfee860698584c030f4c9db1', u'parentHash': u'0x0000000000000000000000000000000000000000000000000000000000000000', u'extraData': u'0x42', u'gasLimit': u'0x2fefd8', u'number': u'0x0', u'stateRoot': u'0x7dba07d6b448a186e9612e5f737d1c909dce473e53199901a302c00646d523c1', u'difficulty': u'0x20000', u'transactions': [], u'timestamp': u'0x54c98c81', u'totalDifficulty': u'0x20000', u'gasUsed': u'0x0', u'size': u'0x1ff'}}
rpc response schema validated.
response has blockHeader hash : True
headers should be equal : True
block number should be zero : True
running test: eth_getBlockByNumber get latest block
sending rpc request: {'params': [u'latest', False], 'jsonrpc': '2.0', 'method': u'eth_getBlockByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0x58b22b72b8e6ffb7', u'logsBloom': u'0xu'transactionsRoot': u'0xf31d97f455889f3e546a301ae23bebb423ebd96af65091efbfa235590817992b', u'hash': u'0x0586b6ab308baacd0888a0fcb674bc335a6a79ef8646d03eca7404b337dfe376', u'uncles': [], u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0x8888f1f195afa192cfee860698584c030f4c9db1', u'parentHash': u'0x8807dc8e3c00e4852a8058a46f8d75af8c4733538b9fcdab1aa8c9206c317c04', u'extraData': u'0x', u'gasLimit': u'0x2fefd8', u'number': u'0x1c', u'stateRoot': u'0x5d7d0bb1e5bdd228a5303959da84bf47397c3837c2f0f18a9ce16b814f5e5624', u'difficulty': u'0x206c0', u'transactions': [u'0xb3e98a60417ff21a09ed51e87cda6936f1783cdd38128be607ef12c457caf355'], u'timestamp': u'0x561bc329', u'totalDifficulty': u'0x3a5e80', u'gasUsed': u'0x5802', u'size': u'0x268'}}
rpc response schema validated.
response has blockHeader hash : True
headers should be equal : False
block number should be 32 : False

running tests for method: eth_getBlockByHash.json
running test: eth_getBlockByHash without full transactions
sending rpc request: {'params': [u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', False], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0xf02576d9a03e7146', u'logsBloom': u'0xu'transactionsRoot': u'0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c', u'hash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'uncles': [], u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0x8888f1f195afa192cfee860698584c030f4c9db1', u'parentHash': u'0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9', u'extraData': u'0x', u'gasLimit': u'0x2fefd8', u'number': u'0x2', u'stateRoot': u'0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac', u'difficulty': u'0x20040', u'transactions': [u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81'], u'timestamp': u'0x561bc2e2', u'totalDifficulty': u'0x60040', u'gasUsed': u'0x53f0', u'size': u'0x268'}}
rpc response schema validated.
response has blockHeader hash : True
headers should be equal : True
transactions should be hashes : True
running test: eth_getBlockByHash with full transactions
sending rpc request: {'params': [u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', True], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0xf02576d9a03e7146', u'logsBloom': u'0xu'transactionsRoot': u'0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c', u'hash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'uncles': [], u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0x8888f1f195afa192cfee860698584c030f4c9db1', u'parentHash': u'0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9', u'extraData': u'0x', u'gasLimit': u'0x2fefd8', u'number': u'0x2', u'stateRoot': u'0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac', u'difficulty': u'0x20040', u'transactions': [{u'nonce': u'0x1', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x4cb2f', u'value': u'0xa', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'transactionIndex': u'0x0', u'gasPrice': u'0x1'}], u'timestamp': u'0x561bc2e2', u'totalDifficulty': u'0x60040', u'gasUsed': u'0x53f0', u'size': u'0x268'}}
ERROR. couldn't validate rpc received response against schema.
exception: {u'nonce': u'0x1', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x4cb2f', u'value': u'0xa', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'transactionIndex': u'0x0', u'gasPrice': u'0x1'} is not valid under any of the given schemas

Failed validating u'oneOf' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'transactions'][u'items']:
    {u'oneOf': [{u'type': u'string'},
                {u'properties': {u'blockHash': {u'type': u'string'},
                                 u'blockNumber': {u'type': u'string'},
                                 u'from': {u'type': u'string'},
                                 u'gas': {u'type': u'string'},
                                 u'gasPrice': {u'type': u'string'},
                                 u'hash': {u'type': u'string'},
                                 u'input': {u'type': u'string'},
                                 u'nonce': {u'type': u'string'},
                                 u'r': {u'type': u'string'},
                                 u's': {u'type': u'string'},
                                 u'to': {u'type': u'string'},
                                 u'transactionIndex': {u'type': u'string'},
                                 u'v': {u'type': u'string'},
                                 u'value': {u'type': u'string'}},
                 u'required': [u'gasPrice',
                               u'v',
                               u'blockHash',
                               u'to',
                               u'nonce',
                               u'gas',
                               u'blockNumber',
                               u'value',
                               u'hash',
                               u'transactionIndex',
                               u'from',
                               u'input',
                               u'r',
                               u's'],
                 u'type': u'object'}]}

On instance[u'result'][u'transactions'][0]:
    {u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942',
     u'blockNumber': u'0x2',
     u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',
     u'gas': u'0x4cb2f',
     u'gasPrice': u'0x1',
     u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81',
     u'input': u'0x12a7b914',
     u'nonce': u'0x1',
     u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f',
     u'transactionIndex': u'0x0',
     u'value': u'0xa'}
response has blockHeader hash : True
headers should be equal : True
transactions should be objects : True
running test: eth_getBlockByHash with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockByHash() takes exactly 3 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getBlockByHash with one parameter
sending rpc request: {'params': [u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942'], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockByHash() takes exactly 3 arguments (2 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True

running tests for method: eth_getUncleByBlockNumberAndIndex.json
running test: eth_getUncleByBlockNumberAndIndex uncle at index 0
sending rpc request: {'params': [u'0x4', u'0x0'], 'jsonrpc': '2.0', 'method': u'eth_getUncleByBlockNumberAndIndex', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0x64050e6ee4c2f3c7', u'transactionsRoot': u'0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', u'hash': u'0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a', u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'parentHash': u'0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9', u'extraData': u'0x', u'gasLimit': u'0x2fefd8', u'number': u'0x2', u'stateRoot': u'0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e', u'difficulty': u'0x20040', u'timestamp': u'0x561bc2e7', u'logsBloom': u'0xu'gasUsed': u'0x0'}}
rpc response schema validated.
response has hash : True
hashes should be equal : True
running test: eth_getUncleByBlockNumberAndIndex with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getUncleByBlockNumberAndIndex', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getUncleByBlockNumberAndIndex() takes exactly 3 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getUncleByBlockNumberAndIndex with one parameter
sending rpc request: {'params': [u'0x4'], 'jsonrpc': '2.0', 'method': u'eth_getUncleByBlockNumberAndIndex', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getUncleByBlockNumberAndIndex() takes exactly 3 arguments (2 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True

running tests for method: eth_getUncleCountByBlockNumber.json
running test: eth_getUncleCountByBlockNumber for block with two uncles
sending rpc request: {'params': [u'0x04'], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Invalid quantity encoding', u'code': -32000}}
rpc response schema validated.
response is not empty : False
uncle count should be equal : False
running test: eth_getUncleCountByBlockNumber for block that doesn't exist
sending rpc request: {'params': [u'0xffff'], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': None}
rpc response schema validated.
response should be null : True
response should not be an error : True
running test: eth_getUncleCountByBlockNumber no parameter
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getUncleCountByBlockNumber() takes exactly 2 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True

running tests for method: eth_getBlockTransactionCountByNumber.json
running test: eth_getBlockTransactionCountByNumber for block with one tx
sending rpc request: {'params': [u'0x04'], 'jsonrpc': '2.0', 'method': u'eth_getBlockTransactionCountByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Invalid quantity encoding', u'code': -32000}}
rpc response schema validated.
response is not empty : False
transaction count should be equal : False
running test: eth_getBlockTransactionCountByNumber "earliest"
sending rpc request: {'params': [u'earliest'], 'jsonrpc': '2.0', 'method': u'eth_getBlockTransactionCountByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': u'0x0'}
rpc response schema validated.
response is not empty : True
transaction count should be equal : True
running test: eth_getBlockTransactionCountByNumber "latest"
sending rpc request: {'params': [u'latest'], 'jsonrpc': '2.0', 'method': u'eth_getBlockTransactionCountByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': u'0x1'}
rpc response schema validated.
response is not empty : True
transaction count should be equal : True
running test: eth_getBlockTransactionCountByNumber with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getBlockTransactionCountByNumber', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockTransactionCountByNumber() takes exactly 2 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True

running tests for method: eth_getUncleCountByBlockHash.json
running test: eth_getUncleCountByBlockHash for block with two uncles
sending rpc request: {'params': [u'0x4e9a67b663f9abe03e7e9fd5452c9497998337077122f44ee78a466f6a7358de'], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': u'0x2'}
rpc response schema validated.
response is not empty : True
uncle count should be equal : True
running test: eth_getUncleCountByBlockHash for block that doesn't exist
sending rpc request: {'params': [u'0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c'], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': None}
rpc response schema validated.
response should be null : True
response should not be an error : True
running test: eth_getUncleCountByBlockHash no parameter
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getUncleCountByBlockHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getUncleCountByBlockHash() takes exactly 2 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True

running tests for method: debug_storageRangeAt.json
running test: debug_storageRangeAt experimental method
sending rpc request: {'params': [u'0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53', 0, u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'0x', u'0x2b', 8], 'jsonrpc': '2.0', 'method': u'debug_storageRangeAt', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response is not empty : False
key 0x00 should be first result in the array : False
storage values at 0x00 should be equal : False
running test: debug_storageRangeAt for block that doesn't exist
sending rpc request: {'params': [u'0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c', 0, u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'0x', u'0x2b', 8], 'jsonrpc': '2.0', 'method': u'debug_storageRangeAt', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response should be an error : True
response should have error code -32000 : False
response should have error message block not found : False
running test: debug_storageRangeAt no parameter
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'debug_storageRangeAt', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : False

running tests for method: eth_sign.json
running test: eth_sign message "hello world"
sending rpc request: {'params': [u'0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb', u'0x68656c6c6f20776f726c64'], 'jsonrpc': '2.0', 'method': u'eth_sign', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response is not empty : False
signed message should be length 132 : False
signatures should be equal : False
running test: eth_sign with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_sign', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : False
running test: eth_sign with one parameter
sending rpc request: {'params': [u'0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb'], 'jsonrpc': '2.0', 'method': u'eth_sign', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'Method not found', u'code': -32601}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : False

running tests for method: eth_getBlockTransactionCountByHash.json
running test: eth_getBlockTransactionCountByHash for block with one tx
sending rpc request: {'params': [u'0x4e9a67b663f9abe03e7e9fd5452c9497998337077122f44ee78a466f6a7358de'], 'jsonrpc': '2.0', 'method': u'eth_getBlockTransactionCountByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': u'0x1'}
rpc response schema validated.
response is not empty : True
transaction count should be equal : True

running tests for method: eth_getUncleByBlockHashAndIndex.json
running test: eth_getUncleByBlockHashAndIndex uncle at index 0
sending rpc request: {'params': [u'0x4e9a67b663f9abe03e7e9fd5452c9497998337077122f44ee78a466f6a7358de', u'0x0'], 'jsonrpc': '2.0', 'method': u'eth_getUncleByBlockHashAndIndex', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'nonce': u'0x64050e6ee4c2f3c7', u'transactionsRoot': u'0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421', u'hash': u'0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a', u'sha3Uncles': u'0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347', u'miner': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'parentHash': u'0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9', u'extraData': u'0x', u'gasLimit': u'0x2fefd8', u'number': u'0x2', u'stateRoot': u'0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e', u'difficulty': u'0x20040', u'timestamp': u'0x561bc2e7', u'logsBloom': u'0xu'gasUsed': u'0x0'}}
rpc response schema validated.
response has hash : True
hashes should be equal : True
running test: eth_getUncleByBlockHashAndIndex with no parameters
sending rpc request: {'params': [], 'jsonrpc': '2.0', 'method': u'eth_getUncleByBlockHashAndIndex', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getUncleByBlockHashAndIndex() takes exactly 3 arguments (1 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
running test: eth_getUncleByBlockHashAndIndex with one parameter
sending rpc request: {'params': [u'0x4e9a67b663f9abe03e7e9fd5452c9497998337077122f44ee78a466f6a7358de'], 'jsonrpc': '2.0', 'method': u'eth_getBlockByHash', 'id': 1}
recieved_response: {u'jsonrpc': u'2.0', u'id': 1, u'error': {u'message': u'getBlockByHash() takes exactly 3 arguments (2 given)', u'code': -32602}}
rpc response schema validated.
response should be an error : True
error code should be -32602 : True
RPEECEE SIM FINISHED
